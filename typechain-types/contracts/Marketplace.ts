/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace Marketplace {
  export type MarketItemStruct = {
    itemId: BigNumberish;
    nftAddress: string;
    tokenId: BigNumberish;
    seller: string;
    buyer: string;
    price: BigNumberish;
    sold: boolean;
    isCanceled: boolean;
    timeCreated: BigNumberish;
    timeSold: BigNumberish;
  };

  export type MarketItemStructOutput = [
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    boolean,
    boolean,
    BigNumber,
    BigNumber
  ] & {
    itemId: BigNumber;
    nftAddress: string;
    tokenId: BigNumber;
    seller: string;
    buyer: string;
    price: BigNumber;
    sold: boolean;
    isCanceled: boolean;
    timeCreated: BigNumber;
    timeSold: BigNumber;
  };
}

export interface MarketplaceInterface extends utils.Interface {
  functions: {
    "buyItem(uint256)": FunctionFragment;
    "cancelSell(uint256)": FunctionFragment;
    "createMarketItem(address,uint256,uint256)": FunctionFragment;
    "getMarketItem(uint256)": FunctionFragment;
    "getMarketItems()": FunctionFragment;
    "marketItem(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAllowedNFT(address,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyItem"
      | "cancelSell"
      | "createMarketItem"
      | "getMarketItem"
      | "getMarketItems"
      | "marketItem"
      | "owner"
      | "renounceOwnership"
      | "setAllowedNFT"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSell",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarketItem",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedNFT",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "buyItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelSell", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createMarketItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "marketItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "BuyItem(address,uint256,uint256,address,address)": EventFragment;
    "CancelSell(address,uint256)": EventFragment;
    "CreateItemSale(address,uint256,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuyItem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelSell"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateItemSale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface BuyItemEventObject {
  _nftAddress: string;
  _tokenId: BigNumber;
  _tokenPrice: BigNumber;
  _seller: string;
  _buyer: string;
}
export type BuyItemEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, string],
  BuyItemEventObject
>;

export type BuyItemEventFilter = TypedEventFilter<BuyItemEvent>;

export interface CancelSellEventObject {
  _seller: string;
  _itemId: BigNumber;
}
export type CancelSellEvent = TypedEvent<
  [string, BigNumber],
  CancelSellEventObject
>;

export type CancelSellEventFilter = TypedEventFilter<CancelSellEvent>;

export interface CreateItemSaleEventObject {
  _nftAddress: string;
  _tokenId: BigNumber;
  _tokenPrice: BigNumber;
  _seller: string;
}
export type CreateItemSaleEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  CreateItemSaleEventObject
>;

export type CreateItemSaleEventFilter = TypedEventFilter<CreateItemSaleEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Marketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyItem(
      _itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelSell(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createMarketItem(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMarketItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Marketplace.MarketItemStructOutput]>;

    getMarketItems(
      overrides?: CallOverrides
    ): Promise<[Marketplace.MarketItemStructOutput[]]>;

    marketItem(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        boolean,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        itemId: BigNumber;
        nftAddress: string;
        tokenId: BigNumber;
        seller: string;
        buyer: string;
        price: BigNumber;
        sold: boolean;
        isCanceled: boolean;
        timeCreated: BigNumber;
        timeSold: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAllowedNFT(
      _nftAddress: string,
      _license: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  buyItem(
    _itemId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelSell(
    _itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createMarketItem(
    _nftAddress: string,
    _tokenId: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMarketItem(
    itemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Marketplace.MarketItemStructOutput>;

  getMarketItems(
    overrides?: CallOverrides
  ): Promise<Marketplace.MarketItemStructOutput[]>;

  marketItem(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      string,
      string,
      BigNumber,
      boolean,
      boolean,
      BigNumber,
      BigNumber
    ] & {
      itemId: BigNumber;
      nftAddress: string;
      tokenId: BigNumber;
      seller: string;
      buyer: string;
      price: BigNumber;
      sold: boolean;
      isCanceled: boolean;
      timeCreated: BigNumber;
      timeSold: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAllowedNFT(
    _nftAddress: string,
    _license: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyItem(_itemId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    cancelSell(_itemId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    createMarketItem(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getMarketItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Marketplace.MarketItemStructOutput>;

    getMarketItems(
      overrides?: CallOverrides
    ): Promise<Marketplace.MarketItemStructOutput[]>;

    marketItem(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        boolean,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        itemId: BigNumber;
        nftAddress: string;
        tokenId: BigNumber;
        seller: string;
        buyer: string;
        price: BigNumber;
        sold: boolean;
        isCanceled: boolean;
        timeCreated: BigNumber;
        timeSold: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAllowedNFT(
      _nftAddress: string,
      _license: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BuyItem(address,uint256,uint256,address,address)"(
      _nftAddress?: null,
      _tokenId?: null,
      _tokenPrice?: null,
      _seller?: null,
      _buyer?: null
    ): BuyItemEventFilter;
    BuyItem(
      _nftAddress?: null,
      _tokenId?: null,
      _tokenPrice?: null,
      _seller?: null,
      _buyer?: null
    ): BuyItemEventFilter;

    "CancelSell(address,uint256)"(
      _seller?: null,
      _itemId?: null
    ): CancelSellEventFilter;
    CancelSell(_seller?: null, _itemId?: null): CancelSellEventFilter;

    "CreateItemSale(address,uint256,uint256,address)"(
      _nftAddress?: null,
      _tokenId?: null,
      _tokenPrice?: null,
      _seller?: null
    ): CreateItemSaleEventFilter;
    CreateItemSale(
      _nftAddress?: null,
      _tokenId?: null,
      _tokenPrice?: null,
      _seller?: null
    ): CreateItemSaleEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    buyItem(
      _itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelSell(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createMarketItem(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMarketItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketItems(overrides?: CallOverrides): Promise<BigNumber>;

    marketItem(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAllowedNFT(
      _nftAddress: string,
      _license: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyItem(
      _itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelSell(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createMarketItem(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMarketItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketItem(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAllowedNFT(
      _nftAddress: string,
      _license: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
